#!/usr/bin/env python3
"""
Script para poblar Firebase con datos de ejemplo de notas de pacientes y relaciones cuidador-paciente.
Este script es √∫til para testing y desarrollo.
"""

import firebase_admin
from firebase_admin import credentials, firestore
from datetime import datetime, timedelta
import random
import os
import sys

# A√±adir el directorio del proyecto al PATH para importar settings
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')
import django
django.setup()

from api.models import FirebaseUser, CaregiverPatientLink

def init_firebase():
    """Inicializar Firebase Admin SDK"""
    try:
        # Intentar obtener la app existente
        firebase_admin.get_app()
        print("‚úì Firebase ya est√° inicializado")
    except ValueError:
        # Si no existe, inicializar
        print("‚úì Inicializando Firebase...")
        # Nota: Aseg√∫rate de tener configurado GOOGLE_APPLICATION_CREDENTIALS
        # o el archivo de credenciales en tu entorno
        
    return firestore.client()

def create_sample_users():
    """Crear usuarios de ejemplo en Django"""
    print("üìã Creando usuarios de ejemplo...")
    
    # Crear pacientes
    patients = []
    patient_emails = [
        'paciente1@ejemplo.com',
        'paciente2@ejemplo.com', 
        'maria.garcia@hospital.com',
        'juan.rodriguez@clinica.com',
        'ana.martinez@salud.com'
    ]
    
    for i, email in enumerate(patient_emails):
        patient, created = FirebaseUser.objects.get_or_create(
            uid=f'patient_uid_{i+1}',
            defaults={
                'email': email,
                'user_type': 'patient'
            }
        )
        if created:
            print(f"  ‚ûï Creado paciente: {patient.email}")
        patients.append(patient)
    
    # Crear cuidadores
    caregivers = []
    caregiver_emails = [
        'cuidador1@ejemplo.com',
        'doctor.smith@hospital.com',
        'enfermera.lopez@clinica.com'
    ]
    
    for i, email in enumerate(caregiver_emails):
        caregiver, created = FirebaseUser.objects.get_or_create(
            uid=f'caregiver_uid_{i+1}',
            defaults={
                'email': email,
                'user_type': 'caregiver'
            }
        )
        if created:
            print(f"  ‚ûï Creado cuidador: {caregiver.email}")
        caregivers.append(caregiver)
    
    # Crear relaciones cuidador-paciente
    print("üîó Creando relaciones cuidador-paciente...")
    
    # Cuidador 1 tiene acceso a pacientes 1 y 2
    for patient in patients[:2]:
        link, created = CaregiverPatientLink.objects.get_or_create(
            caregiver=caregivers[0],
            patient=patient
        )
        if created:
            print(f"  üîó Vinculado: {caregivers[0].email} -> {patient.email}")
    
    # Cuidador 2 (doctor) tiene acceso a pacientes 3, 4 y 5
    for patient in patients[2:]:
        link, created = CaregiverPatientLink.objects.get_or_create(
            caregiver=caregivers[1],
            patient=patient
        )
        if created:
            print(f"  üîó Vinculado: {caregivers[1].email} -> {patient.email}")
    
    # Cuidador 3 (enfermera) tiene acceso a pacientes 1, 3 y 4
    for patient in [patients[0], patients[2], patients[3]]:
        link, created = CaregiverPatientLink.objects.get_or_create(
            caregiver=caregivers[2],
            patient=patient
        )
        if created:
            print(f"  üîó Vinculado: {caregivers[2].email} -> {patient.email}")
    
    return patients, caregivers

def create_sample_notes(db, patients):
    """Crear notas de ejemplo en Firestore"""
    print("üìù Creando notas de ejemplo en Firestore...")
    
    note_templates = [
        {
            'content': 'An√°lisis de ritmo card√≠aco: Se observa una frecuencia card√≠aca estable dentro del rango normal (72 bpm). No se detectan anomal√≠as significativas en el patr√≥n card√≠aco. Los valores est√°n dentro de los par√°metros esperados para la edad del paciente.',
            'type': 'analysis'
        },
        {
            'content': 'Recomendaci√≥n: Mantener actividad f√≠sica moderada y seguir una dieta equilibrada. Se sugiere realizar ejercicio cardiovascular 3 veces por semana durante 30 minutos. Aumentar consumo de verduras y reducir sal.',
            'type': 'recommendation'
        },
        {
            'content': 'Observaci√≥n: Los niveles de sudoraci√≥n han disminuido ligeramente en las √∫ltimas 24 horas. Esto puede indicar una mejor hidrataci√≥n o cambios en la actividad f√≠sica. El paciente reporta sentirse m√°s c√≥modo.',
            'type': 'observation'
        },
        {
            'content': 'An√°lisis de temperatura: La temperatura corporal se mantiene estable en 37.1¬∞C, lo cual est√° dentro del rango normal. No se detectan signos de fiebre. La variaci√≥n t√©rmica es m√≠nima.',
            'type': 'analysis'
        },
        {
            'content': 'Recomendaci√≥n: Aumentar la ingesta de l√≠quidos, especialmente agua. Se recomienda beber al menos 2 litros de agua al d√≠a para mantener una hidrataci√≥n √≥ptima. Evitar bebidas azucaradas.',
            'type': 'recommendation'
        },
        {
            'content': 'Observaci√≥n: El paciente ha mostrado patrones de sue√±o m√°s regulares en los √∫ltimos d√≠as. Esto es un indicador positivo de bienestar general. Se nota mejor estado de √°nimo.',
            'type': 'observation'
        },
        {
            'content': 'An√°lisis de actividad: Los datos muestran un incremento del 15% en la actividad f√≠sica diaria. El paciente ha sido m√°s activo, lo cual es beneficioso para su salud cardiovascular.',
            'type': 'analysis'
        },
        {
            'content': 'Recomendaci√≥n: Considerar a√±adir ejercicios de relajaci√≥n o meditaci√≥n a la rutina diaria para mejorar el manejo del estr√©s. T√©cnicas de respiraci√≥n profunda pueden ser √∫tiles.',
            'type': 'recommendation'
        },
        {
            'content': 'Observaci√≥n: Se detect√≥ un pico inusual en la frecuencia card√≠aca durante las primeras horas de la ma√±ana. Puede estar relacionado con estr√©s o actividad f√≠sica intensa.',
            'type': 'observation'
        },
        {
            'content': 'An√°lisis de tendencias: Los datos de las √∫ltimas 2 semanas muestran una tendencia positiva en todos los indicadores de salud. La constancia en los h√°bitos est√° dando resultados.',
            'type': 'analysis'
        },
        {
            'content': 'Recomendaci√≥n: Mantener el horario actual de medicamentos. La adherencia al tratamiento ha sido excelente. Continuar con los controles peri√≥dicos programados.',
            'type': 'recommendation'
        },
        {
            'content': 'Observaci√≥n: Notable mejora en los niveles de energ√≠a reportados por el paciente. Se correlaciona con la mejora en la calidad del sue√±o y la actividad f√≠sica regular.',
            'type': 'observation'
        }
    ]
    
    for patient in patients:
        print(f"  üë§ Creando notas para {patient.email}...")
        
        # Crear entre 8-15 notas por paciente
        num_notes = random.randint(8, 15)
        
        for i in range(num_notes):
            # Seleccionar plantilla aleatoria
            template = random.choice(note_templates)
            
            # Crear fecha aleatoria en los √∫ltimos 45 d√≠as
            days_ago = random.randint(0, 45)
            hours_ago = random.randint(0, 23)
            minutes_ago = random.randint(0, 59)
            
            created_at = datetime.now() - timedelta(
                days=days_ago, 
                hours=hours_ago,
                minutes=minutes_ago
            )
            
            note_data = {
                'content': template['content'],
                'type': template['type'],
                'createdAt': created_at.isoformat(),
                'patientUid': patient.uid,
                'analysisVersion': '1.0',
                'priority': random.choice(['low', 'medium', 'high']),
                'tags': random.sample(['cardiovascular', 'actividad', 'sue√±o', 'hidrataci√≥n', 'estr√©s'], random.randint(1, 3))
            }
            
            # A√±adir nota a Firestore
            notes_ref = db.collection('users').document(patient.uid).collection('notes')
            doc_ref = notes_ref.add(note_data)
            print(f"    ‚úÖ Nota creada: {template['type']} (ID: {doc_ref[1].id})")

def create_sample_health_data(db, patients):
    """Crear datos de salud de ejemplo para las gr√°ficas"""
    print("üìä Creando datos de salud para gr√°ficas...")
    
    for patient in patients:
        print(f"  üë§ Creando datos de salud para {patient.email}...")
        
        # Crear datos para los √∫ltimos 30 d√≠as
        health_data = []
        for days_ago in range(30, 0, -1):
            date = datetime.now() - timedelta(days=days_ago)
            
            # Generar datos realistas con variaciones
            base_cardiovascular = 75 + random.randint(-15, 15)
            base_sudor = 40 + random.randint(-10, 10)
            base_temperatura = 37.0 + random.uniform(-0.5, 0.5)
            
            health_point = {
                'date': date.isoformat(),
                'cardiovascular': max(60, min(100, base_cardiovascular)),
                'sudor': max(20, min(60, base_sudor)),
                'temperatura': round(max(36.0, min(38.0, base_temperatura)), 1),
                'timestamp': date.timestamp()
            }
            
            health_data.append(health_point)
        
        # Guardar en Firestore
        health_ref = db.collection('users').document(patient.uid).collection('health_data')
        
        # Guardar en lotes para mejor rendimiento
        batch = db.batch()
        for data_point in health_data:
            doc_ref = health_ref.document()
            batch.set(doc_ref, data_point)
        
        batch.commit()
        print(f"    ‚úÖ Creados {len(health_data)} puntos de datos de salud")

def main():
    """Funci√≥n principal"""
    print("üöÄ Iniciando script de poblaci√≥n de datos...")
    
    try:
        # Inicializar Firebase
        db = init_firebase()
        
        # Crear usuarios de ejemplo
        patients, caregivers = create_sample_users()
        
        # Crear notas de ejemplo
        create_sample_notes(db, patients)
        
        # Crear datos de salud de ejemplo
        create_sample_health_data(db, patients)
        
        print("\n‚úÖ ¬°Datos de ejemplo creados exitosamente!")
        print("\nüìä Resumen:")
        print(f"  ‚Ä¢ {len(patients)} pacientes creados")
        print(f"  ‚Ä¢ {len(caregivers)} cuidadores creados")
        print(f"  ‚Ä¢ M√∫ltiples relaciones cuidador-paciente establecidas")
        print(f"  ‚Ä¢ 8-15 notas por paciente creadas")
        print(f"  ‚Ä¢ 30 d√≠as de datos de salud por paciente")
        
        print("\nüîê Usuarios para testing:")
        print("\nüë• PACIENTES:")
        for patient in patients:
            print(f"  üìß {patient.email} (UID: {patient.uid})")
        
        print("\nüë®‚Äç‚öïÔ∏è CUIDADORES:")
        for caregiver in caregivers:
            print(f"  üìß {caregiver.email} (UID: {caregiver.uid})")
        
        print("\nüìã Funcionalidades para probar:")
        print("  ‚Ä¢ Login como paciente para ver dashboard con notas")
        print("  ‚Ä¢ Login como cuidador para gestionar pacientes")
        print("  ‚Ä¢ A√±adir/desvincular pacientes como cuidador")
        print("  ‚Ä¢ Ver gr√°ficas de salud de pacientes")
        print("  ‚Ä¢ Navegar entre notas y an√°lisis")
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    exit(main())