// Script para a√±adir an√°lisis de ejemplo a los pacientes
const { initializeApp } = require('firebase/app');
const { getDatabase, ref, set, push, get } = require('firebase/database');

const firebaseConfig = {
  apiKey: "AIzaSyDQEWZhaViw-7LT-VLs4XdCXcFg25DmrqQ",
  authDomain: "pulsoft-fc676.firebaseapp.com",
  databaseURL: "https://pulsoft-fc676-default-rtdb.firebaseio.com",
  projectId: "pulsoft-fc676",
  storageBucket: "pulsoft-fc676.appspot.com",
  messagingSenderId: "758196176997",
  appId: "1:758196176997:web:f8f023b9c03fca2e489e8c",
  measurementId: "G-K6XJ908EXP"
};

// Inicializar Firebase
const app = initializeApp(firebaseConfig);
const db = getDatabase(app);

// An√°lisis de ejemplo para pacientes
const sampleAnalyses = [
  {
    id: 'analysis_001',
    analisis_IA: 'An√°lisis de ritmo card√≠aco: Se detecta una frecuencia card√≠aca ligeramente elevada (85 bpm) que puede indicar estr√©s o actividad f√≠sica reciente. Se recomienda monitorear durante las pr√≥ximas horas y considerar t√©cnicas de relajaci√≥n.',
    analizadoEn: '2024-01-15 14:30:00',
    severity: 'medium',
    category: 'cardiovascular'
  },
  {
    id: 'analysis_002',
    analisis_IA: 'An√°lisis de sudoraci√≥n: Los niveles de GSR muestran una disminuci√≥n del 15% comparado con el promedio semanal. Esto puede indicar mejor hidrataci√≥n o reducci√≥n del estr√©s. Se recomienda mantener la ingesta de agua actual.',
    analizadoEn: '2024-01-14 10:15:00',
    severity: 'low',
    category: 'sudor'
  },
  {
    id: 'analysis_003',
    analisis_IA: 'An√°lisis de temperatura: La temperatura corporal se mantiene estable en 37.1¬∞C, dentro del rango normal. No se detectan signos de fiebre o hipotermia. El patr√≥n diurno es consistente con la actividad f√≠sica.',
    analizadoEn: '2024-01-13 16:45:00',
    severity: 'low',
    category: 'temperatura'
  },
  {
    id: 'analysis_004',
    analisis_IA: 'An√°lisis general: El paciente muestra patrones saludables en todos los biomarcadores. Se recomienda mantener la rutina actual y continuar con el monitoreo regular. Los niveles de actividad f√≠sica son apropiados.',
    analizadoEn: '2024-01-12 09:20:00',
    severity: 'low',
    category: 'general'
  },
  {
    id: 'analysis_005',
    analisis_IA: 'ALERTA: Se detect√≥ un pico anormal en la frecuencia card√≠aca (120 bpm) durante el per√≠odo de descanso. Se recomienda evaluaci√≥n m√©dica inmediata y monitoreo continuo de los signos vitales.',
    analizadoEn: '2024-01-11 15:30:00',
    severity: 'high',
    category: 'cardiovascular'
  },
  {
    id: 'analysis_006',
    analisis_IA: 'An√°lisis de patrones de sue√±o: Los niveles de sudoraci√≥n nocturna han disminuido significativamente, indicando mejor calidad del sue√±o. Se recomienda mantener la rutina actual de descanso y evitar estimulantes antes de dormir.',
    analizadoEn: '2024-01-10 11:45:00',
    severity: 'low',
    category: 'sudor'
  },
  {
    id: 'analysis_007',
    analisis_IA: 'An√°lisis de correlaci√≥n: Se observa una correlaci√≥n positiva entre la actividad f√≠sica y la temperatura corporal. Los picos de temperatura coinciden con sesiones de ejercicio, lo cual es normal y saludable.',
    analizadoEn: '2024-01-09 13:20:00',
    severity: 'low',
    category: 'general'
  },
  {
    id: 'analysis_008',
    analisis_IA: 'An√°lisis de tendencias: Los √∫ltimos 7 d√≠as muestran una estabilidad general en todos los par√°metros biom√©tricos. El paciente mantiene un buen estado de salud con mejoras en la hidrataci√≥n.',
    analizadoEn: '2024-01-08 08:15:00',
    severity: 'low',
    category: 'general'
  },
  {
    id: 'analysis_009',
    analisis_IA: 'An√°lisis de respuesta al ejercicio: La frecuencia card√≠aca durante el ejercicio se mantiene dentro del rango objetivo (60-80% de la frecuencia m√°xima). Se recomienda continuar con la rutina de ejercicio actual.',
    analizadoEn: '2024-01-07 16:30:00',
    severity: 'low',
    category: 'cardiovascular'
  },
  {
    id: 'analysis_010',
    analisis_IA: 'An√°lisis de recuperaci√≥n: Los niveles de sudoraci√≥n post-ejercicio indican una buena recuperaci√≥n. El tiempo de recuperaci√≥n es apropiado para la intensidad del ejercicio realizado.',
    analizadoEn: '2024-01-06 12:00:00',
    severity: 'low',
    category: 'sudor'
  }
];

async function addSampleAnalyses() {
  console.log('üöÄ A√±adiendo an√°lisis de ejemplo a los pacientes...\n');

  try {
    // 1. Obtener todos los pacientes
    console.log('1Ô∏è‚É£ Obteniendo lista de pacientes...');
    const patientsRef = ref(db, 'patients');
    const patientsSnapshot = await get(patientsRef);
    
    if (!patientsSnapshot.exists()) {
      console.log('‚ùå No hay pacientes en la base de datos');
      return;
    }

    const patients = patientsSnapshot.val();
    const patientIds = Object.keys(patients);
    
    console.log(`‚úÖ Encontrados ${patientIds.length} pacientes`);

    // 2. A√±adir an√°lisis a cada paciente
    console.log('\n2Ô∏è‚É£ A√±adiendo an√°lisis...');
    let totalAnalysesAdded = 0;
    
    for (const patientId of patientIds) {
      console.log(`   üìä Procesando paciente ${patientId}...`);
      
      const analysesRef = ref(db, `patients/${patientId}/analyses`);
      
      // Verificar si ya tiene an√°lisis
      const existingAnalysesSnapshot = await get(analysesRef);
      if (existingAnalysesSnapshot.exists()) {
        const existingAnalyses = existingAnalysesSnapshot.val();
        const existingAnalysesCount = Object.keys(existingAnalyses).length;
        console.log(`      ‚ö†Ô∏è  Ya tiene ${existingAnalysesCount} an√°lisis, saltando...`);
        continue;
      }
      
      // A√±adir an√°lisis
      for (const analysis of sampleAnalyses) {
        const newAnalysisRef = push(analysesRef);
        await set(newAnalysisRef, {
          ...analysis,
          patientId: patientId,
          analizadoEn: new Date(analysis.analizadoEn).toISOString()
        });
      }
      
      totalAnalysesAdded += sampleAnalyses.length;
      console.log(`      ‚úÖ ${sampleAnalyses.length} an√°lisis a√±adidos`);
    }

    console.log('\n‚úÖ ¬°Proceso completado!');
    console.log(`üìä Resumen:`);
    console.log(`   - ${patientIds.length} pacientes procesados`);
    console.log(`   - ${totalAnalysesAdded} an√°lisis a√±adidos en total`);
    console.log(`   - ${sampleAnalyses.length} an√°lisis por paciente`);

  } catch (error) {
    console.error('‚ùå Error a√±adiendo an√°lisis:', error);
  }
}

// Funci√≥n para a√±adir an√°lisis a un paciente espec√≠fico
async function addAnalysesToSpecificPatient(patientId) {
  console.log(`üöÄ A√±adiendo an√°lisis al paciente ${patientId}...\n`);

  try {
    const analysesRef = ref(db, `patients/${patientId}/analyses`);
    
    // Verificar si ya tiene an√°lisis
    const existingAnalysesSnapshot = await get(analysesRef);
    if (existingAnalysesSnapshot.exists()) {
      const existingAnalyses = existingAnalysesSnapshot.val();
      const existingAnalysesCount = Object.keys(existingAnalyses).length;
      console.log(`‚ö†Ô∏è  El paciente ya tiene ${existingAnalysesCount} an√°lisis`);
      
      // Preguntar si quiere sobrescribir
      console.log('¬øDesea sobrescribir los an√°lisis existentes? (s/n)');
      // En un entorno real, aqu√≠ se manejar√≠a la entrada del usuario
      return;
    }
    
    // A√±adir an√°lisis
    for (const analysis of sampleAnalyses) {
      const newAnalysisRef = push(analysesRef);
      await set(newAnalysisRef, {
        ...analysis,
        patientId: patientId,
        analizadoEn: new Date(analysis.analizadoEn).toISOString()
      });
    }
    
    console.log(`‚úÖ ${sampleAnalyses.length} an√°lisis a√±adidos al paciente ${patientId}`);

  } catch (error) {
    console.error('‚ùå Error a√±adiendo an√°lisis:', error);
  }
}

// Funci√≥n principal
async function main() {
  console.log('üîß Herramienta de an√°lisis de ejemplo para Pulsoft\n');
  
  // Verificar argumentos de l√≠nea de comandos
  const args = process.argv.slice(2);
  
  if (args.length > 0) {
    // Si se proporciona un ID de paciente espec√≠fico
    const patientId = args[0];
    console.log(`üéØ A√±adiendo an√°lisis al paciente espec√≠fico: ${patientId}`);
    await addAnalysesToSpecificPatient(patientId);
  } else {
    // A√±adir an√°lisis a todos los pacientes
    await addSampleAnalyses();
  }
}

// Ejecutar el script
main().then(() => {
  console.log('\nüéâ Proceso completado');
  process.exit(0);
}).catch(error => {
  console.error('‚ùå Error en el proceso:', error);
  process.exit(1);
});